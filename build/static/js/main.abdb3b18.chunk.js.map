{"version":3,"sources":["index.js"],"names":["getItems","count","offset","Array","from","length","v","k","map","id","content","reorder","list","startIndex","endIndex","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","index","droppableId","getItemStyle","isDragging","draggableStyle","userSelect","padding","grid","margin","background","getListStyle","isDraggingOver","width","App","state","items","selected","id2List","droppable","droppable2","getList","onDragEnd","setState","className","this","provided","snapshot","ref","innerRef","style","item","key","draggableId","draggableProps","dragHandleProps","placeholder","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abdb3b18.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport './index.css';\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    Array.from({ length: count }, (v, k) => k).map(k => ({\n        id: `item-${k + offset}`,\n        content: `item ${k + offset}`\n    }));\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid * 2,\n    margin: `0 0 ${grid}px 0`,\n\n    // change background colour if dragging\n    background: isDragging ? 'lightgreen' : '#fff',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightblue' : '#430969',\n    padding: grid,\n    width: 250\n});\n\nclass App extends Component {\n    state = {\n        items: getItems(10),\n        selected: getItems(5, 10)\n    };\n\n    /**\n     * A semi-generic way to handle multiple lists. Matches\n     * the IDs of the droppable container to the names of the\n     * source arrays stored in the state.\n     */\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected'\n    };\n\n    getList = id => this.state[this.id2List[id]];\n\n    onDragEnd = result => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(\n                this.getList(source.droppableId),\n                source.index,\n                destination.index\n            );\n\n            let state = { items };\n\n            if (source.droppableId === 'droppable2') {\n                state = { selected: items };\n            }\n\n            this.setState(state);\n        } else {\n            const result = move(\n                this.getList(source.droppableId),\n                this.getList(destination.droppableId),\n                source,\n                destination\n            );\n\n            this.setState({\n                items: result.droppable,\n                selected: result.droppable2\n            });\n        }\n    };\n\n    // Normally you would want to split things out into separate components.\n    // But in this example everything is just done in one place for simplicity\n    render() {\n        return [\n            <div>\n                <h1>Drag and Drop Lists</h1>\n                <p>By JP Juliao</p>\n            </div>,\n            <div className=\"lists\">\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Droppable droppableId=\"droppable\">\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}>\n                                {this.state.items.map((item, index) => (\n                                    <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                    <Droppable droppableId=\"droppable2\">\n                        {(provided, snapshot) => (\n                            <div\n                                ref={provided.innerRef}\n                                style={getListStyle(snapshot.isDraggingOver)}>\n                                {this.state.selected.map((item, index) => (\n                                    <Draggable\n                                        key={item.id}\n                                        draggableId={item.id}\n                                        index={index}>\n                                        {(provided, snapshot) => (\n                                            <div\n                                                ref={provided.innerRef}\n                                                {...provided.draggableProps}\n                                                {...provided.dragHandleProps}\n                                                style={getItemStyle(\n                                                    snapshot.isDragging,\n                                                    provided.draggableProps.style\n                                                )}>\n                                                {item.content}\n                                            </div>\n                                        )}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        ];\n    }\n}\n\n// Put the things into the DOM!\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}